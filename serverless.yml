service: ${self:custom.env.SERVICE_NAME}
frameworkVersion: '3'

package:
  individually: true
  exclude:
    - node_modules/**
    - .serverless/**

custom:
  prune:
    automatic: true
    number: 5
  env: ${file(./serverless-env/${opt:stage,'local'}.json)}
  pythonRequirements:
    dockerizePip: true

provider:
  name: aws
  profile: default
  region: ${self:custom.env.AWS_PROFILE_REGION}
  stage: ${opt:stage, 'sandbox'}
  apiGateway:
    binaryMediaTypes:
      - '*/*'
  memorySize: 1024
  timeout: 30
  iam:
    role: ${self:custom.env.AWS_IAM_ROLE}
  deploymentBucket:
    name: ${self:custom.env.DEPLOY_BUCKET}
  environment:
    DEPLOYMENT_ENVIRONMENT: ${self:custom.env.STAGE}
  logRetentionInDays: 30
  ecr:
    images:
      demo-api:
        platform: linux/amd64
        path: ./

functions:
  main:
    image:
      name: demo-api
    name: ${self:custom.env.SERVICE_NAME}-${self:custom.env.STAGE}
    maximumRetryAttempts: 0
    events:
      - http:
          method: GET
          path: /docs
          private: false
      - http:
          method: GET
          path: '/docs/{proxy+}'
          private: false
      - http:
          method: ANY
          path: /
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - AuthorizationR
            allowCredentials: false
          private: ${self:custom.env.PROTECT_API}
      - http:
          method: ANY
          path: '{proxy+}'
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - AuthorizationR
            allowCredentials: false
          private: ${self:custom.env.PROTECT_API}

plugins:
  - serverless-prune-plugin
  - serverless-python-requirements
